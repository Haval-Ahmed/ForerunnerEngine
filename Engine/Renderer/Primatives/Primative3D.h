//////////////////////////////////////////////////////////////////////////
/// @File:
///     Primative3D.h
/// @Notes:
///     Basic 3D primative class
/// @Author:
///     Haval Ahmed
/// @Copyright:
///     See attached license 
///		All rights reserved Haval Ahmed
//////////////////////////////////////////////////////////////////////////

#ifndef PRIMATIVE_3D_H
#define PRIMATIVE_3D_H

//////////////////////////////////////////////////////////////////////////
/// Standard Libraries
//////////////////////////////////////////////////////////////////////////
#include <cstdint>

//////////////////////////////////////////////////////////////////////////
/// Forerunner Libraries
//////////////////////////////////////////////////////////////////////////
#include "Vertices.h"

namespace ForerunnerEngine
{
    class Primative3D
    {
    public:
        //////////////////////////////////////////////////////////////////////////
        /// Disallow constructor
        //////////////////////////////////////////////////////////////////////////
        Primative3D();

        //////////////////////////////////////////////////////////////////////////
        /// Virtual Destructor
        //////////////////////////////////////////////////////////////////////////
        virtual ~Primative3D();

        //////////////////////////////////////////////////////////////////////////
        /// Setters
        //////////////////////////////////////////////////////////////////////////
        virtual void setPosition(const glm::vec3& primativePosition);
        virtual void setOrientation(const glm::vec3& primativeOrientation);
        virtual void setVelocity(const glm::vec3& primativeVelocity);
        virtual void setVertexOffsetSize(uint32_t offsetSize);
        virtual void setVertexSize(uint32_t size);
        virtual void setIndiceOffsetSize(uint32_t offsetSize);
        virtual void setIndiceSize(uint32_t size);
        virtual void setTexture(uint32_t textureIndex);

        //////////////////////////////////////////////////////////////////////////
        /// Getters
        //////////////////////////////////////////////////////////////////////////
        virtual glm::vec3        getPosition(void);
        virtual glm::vec3        getOrientation(void);
        virtual glm::vec3        getVelocity(void);

        virtual glm::vec4        getAmbient(void);
        virtual glm::vec4        getDiffuse(void);
        virtual glm::vec4        getSpecular(void);
        virtual glm::vec4        getReflect(void);

        virtual glm::mat4   getModelMatrix(void);

        virtual uint32_t    getVertexOffsetSize(void);
        virtual uint32_t    getVertexSize(void);

        virtual uint32_t    getIndiceOffsetSize(void);
        virtual uint32_t    getIndiceSize(void);

        virtual uint32_t    getTexture(void);

    protected:

        //////////////////////////////////////////////////////////////////////////
        /// Model
        //////////////////////////////////////////////////////////////////////////
        glm::mat4 modelMatrix;

        //////////////////////////////////////////////////////////////////////////
        /// Vertice Information
        //////////////////////////////////////////////////////////////////////////
        uint32_t vertexOffsetSize;
        uint32_t vertexSize;
        uint32_t indiceOffsetSize;
        uint32_t indiceSize;
        uint32_t texture;

        //////////////////////////////////////////////////////////////////////////
        /// Position, Orientation, and Velocity Vectors
        //////////////////////////////////////////////////////////////////////////
        glm::vec3 position;
        glm::vec3 orientation;
        glm::vec3 velocity;

        //////////////////////////////////////////////////////////////////////////
        ///	Material Information
        //////////////////////////////////////////////////////////////////////////
        glm::vec4 ambient;
        glm::vec4 diffuse;
        glm::vec4 specular;
        glm::vec4 reflect;
    };
}

#endif