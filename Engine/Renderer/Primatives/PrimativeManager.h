/// @file PrimativeManager.h
/// @brief Primative Manager 
/// @author Haval Ahmed

#ifndef PRIMATIVE_MANAGER_H
#define PRIMATIVE_MANAGER_H

//////////////////////////////////////////////////////////////////////////
/// Forerunner Libraries
//////////////////////////////////////////////////////////////////////////
#include "Primative3D.h"

namespace ForerunnerEngine
{
    class PrimativeManager
    {
    public:
        //////////////////////////////////////////////////////////////////////////
        /// Constructor
        //////////////////////////////////////////////////////////////////////////
        PrimativeManager() { }

        //////////////////////////////////////////////////////////////////////////
        /// Virtual Destructor
        //////////////////////////////////////////////////////////////////////////
        virtual ~PrimativeManager() { }

        //////////////////////////////////////////////////////////////////////////
        /// Utilities
        //////////////////////////////////////////////////////////////////////////
        virtual void draw(const glm::mat4& projectionMatrix, const glm::mat4& viewMatrix) = 0;

        //////////////////////////////////////////////////////////////////////////
        /// Object Creation
        //////////////////////////////////////////////////////////////////////////
        virtual Primative3D* createCube(void)       = 0;
        virtual Primative3D* createPyramid(void)    = 0;
        virtual Primative3D* createCylinder(void)   = 0;
        virtual Primative3D* createPlane(void)      = 0;
        virtual Primative3D* createSphere(void)     = 0;
        virtual Primative3D* createTriangle(void)   = 0;
    };
}

#endif