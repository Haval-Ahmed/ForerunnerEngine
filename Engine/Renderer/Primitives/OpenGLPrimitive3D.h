/// @file PrimitiveRendererObject2D.h
/// @brief Primitive Renderer Object 2D class that contains necessary Renderer specific information to render an object
/// @author Haval Ahmed

#ifndef PRIMITIVE_RENDERER_OBJECT_2D
#define PRIMITIVE_RENDERER_OBJECT_2D

//////////////////////////////////////////////////////////////////////////
/// Standard Libraries
//////////////////////////////////////////////////////////////////////////
#include <vector>

//////////////////////////////////////////////////////////////////////////
/// Forerunner Libraries
//////////////////////////////////////////////////////////////////////////
#include "PrimitiveData3D.h"

namespace ForerunnerEngine
{
    class PrimitiveRenderer
    {
    public:
        //////////////////////////////////////////////////////////////////////////
        /// Constructor
        //////////////////////////////////////////////////////////////////////////
        PrimitiveRenderer();

        //////////////////////////////////////////////////////////////////////////
        /// Virtual Destructor
        //////////////////////////////////////////////////////////////////////////
        virtual ~PrimitiveRenderer();

        //////////////////////////////////////////////////////////////////////////
        /// Utilities
        //////////////////////////////////////////////////////////////////////////
        virtual void init(void)                                                                                                             = 0;
        virtual void upload(PrimitiveData3D& primitiveType)                                                                                 = 0;
        virtual void draw(float deltaTime, const glm::mat4& projectionMatrix, const glm::mat4& viewMatrix, const glm::mat4& modelMatrix)    = 0;

    private:

        //////////////////////////////////////////////////////////////////////////
        /// OpenGL Vertex Attribute Specification
        //////////////////////////////////////////////////////////////////////////
        uint32_t VAO;
        uint32_t VBO;
        uint32_t IBO;
    };
}

#endif