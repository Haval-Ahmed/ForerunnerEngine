/// @file Primative3D.h
/// @brief Basic 3D primative class
/// @author Haval Ahmed

#ifndef PRIMATIVE_3D_H
#define PRIMATIVE_3D_H

//////////////////////////////////////////////////////////////////////////
/// Standard Libraries
//////////////////////////////////////////////////////////////////////////
#include <cstdint>

//////////////////////////////////////////////////////////////////////////
/// Forerunner Libraries
//////////////////////////////////////////////////////////////////////////
#include "Vertices.h"
#include "Transform.h"

namespace ForerunnerEngine
{
    class Primative3D
    {
    public:
        //////////////////////////////////////////////////////////////////////////
        /// Constructor
        //////////////////////////////////////////////////////////////////////////
        Primative3D();

        //////////////////////////////////////////////////////////////////////////
        /// Virtual Destructor
        //////////////////////////////////////////////////////////////////////////
        virtual ~Primative3D();

        //////////////////////////////////////////////////////////////////////////
        /// Utilities
        //////////////////////////////////////////////////////////////////////////
        virtual void update(float deltaTime) = 0;
        virtual void draw(float deltaTime, const glm::mat4& projectionMatrix, const glm::mat4& viewMatrix) = 0;

        //////////////////////////////////////////////////////////////////////////
        /// Setters
        //////////////////////////////////////////////////////////////////////////
        virtual void setPosition(const glm::vec3& position);
        virtual void setOrientation(const glm::vec3& orientation);
        virtual void setScale(const glm::vec3& scale);

        //////////////////////////////////////////////////////////////////////////
        /// Getters
        //////////////////////////////////////////////////////////////////////////
        virtual glm::vec3 getPosition(void);
        virtual glm::vec3 getOrientation(void);
        virtual glm::vec3 getScale(void);

    protected:

        //////////////////////////////////////////////////////////////////////////
        /// OpenGL functions
        //////////////////////////////////////////////////////////////////////////
        void initializeOpenGL(void);
        void cleanOpenGL(void);
        void updateBufferData(void);

        //////////////////////////////////////////////////////////////////////////
        /// OpenGL Vertex Attribute Specification
        //////////////////////////////////////////////////////////////////////////
        uint32_t    vertexArrayObject;
        uint32_t    vertexBufferObject;
        uint32_t    normalBufferObject;
        uint32_t    textureBufferObject;
        uint32_t    indiceBufferObject;
    };
}

#endif