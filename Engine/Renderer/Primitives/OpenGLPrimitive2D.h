/// @file OpenGLPrimitive2D.h
/// @brief Primitive Renderer Object 2D class that contains necessary Renderer specific information to render an object
/// @author Haval Ahmed

#ifndef OPENGL_PRIMITIVE_2D_H
#define OPENGL_PRIMITIVE_2D_H

//////////////////////////////////////////////////////////////////////////
/// Standard Libraries
//////////////////////////////////////////////////////////////////////////
#include <vector>

//////////////////////////////////////////////////////////////////////////
/// Forerunner Libraries
//////////////////////////////////////////////////////////////////////////
#include "PrimitiveData2D.h"
#include "OpenGLShader.h"
#include "Transform.h"
#include "OpenGLTexture.h"

namespace ForerunnerEngine
{
    class OpenGLPrimitive2D
    {
    public:
        //////////////////////////////////////////////////////////////////////////
        /// Constructor
        //////////////////////////////////////////////////////////////////////////
        OpenGLPrimitive2D();

        //////////////////////////////////////////////////////////////////////////
        /// Virtual Destructor
        //////////////////////////////////////////////////////////////////////////
        virtual ~OpenGLPrimitive2D() {}

        //////////////////////////////////////////////////////////////////////////
        /// Utilities
        //////////////////////////////////////////////////////////////////////////
        virtual void draw(float deltaTime, const glm::mat4& projectionMatrix) = 0;

        //////////////////////////////////////////////////////////////////////////
        /// Setters
        //////////////////////////////////////////////////////////////////////////
        virtual void setPosition(const glm::vec3& position);
        virtual void setOrientation(const glm::vec3& orientation);
        virtual void setScale(const glm::vec3& scale);
        virtual void setColor(const glm::vec4& color);

        //////////////////////////////////////////////////////////////////////////
        /// Getters
        //////////////////////////////////////////////////////////////////////////
        virtual glm::vec3 getPosition(void);
        virtual glm::vec3 getOrientation(void);
        virtual glm::vec3 getScale(void);

    protected:

        //////////////////////////////////////////////////////////////////////////
        /// Utilities
        //////////////////////////////////////////////////////////////////////////
        virtual void init(void) = 0;

        //////////////////////////////////////////////////////////////////////////
        /// OpenGL Vertex Attribute Specification
        //////////////////////////////////////////////////////////////////////////
        uint32_t VAO;
        uint32_t VBO;
        uint32_t IBO;

        //////////////////////////////////////////////////////////////////////////
        /// OpenGL Shader
        //////////////////////////////////////////////////////////////////////////
        OpenGLShader Shader2D;

        //////////////////////////////////////////////////////////////////////////
        /// Primitive Transform
        //////////////////////////////////////////////////////////////////////////
        Transform ModelTransform;

        //////////////////////////////////////////////////////////////////////////
        /// OpenGL Texture
        //////////////////////////////////////////////////////////////////////////
        OpenGLTexture Texture;
    };

    class Rectangle2DPrimitive : public OpenGLPrimitive2D
    {
    public:
        //////////////////////////////////////////////////////////////////////////
        /// Constructor
        //////////////////////////////////////////////////////////////////////////
        Rectangle2DPrimitive();

        //////////////////////////////////////////////////////////////////////////
        /// Virtual Destructor
        //////////////////////////////////////////////////////////////////////////
        virtual ~Rectangle2DPrimitive();

        //////////////////////////////////////////////////////////////////////////
        /// Utilities
        //////////////////////////////////////////////////////////////////////////
        virtual void draw(float deltaTime, const glm::mat4& projectionMatrix);

    protected:

        //////////////////////////////////////////////////////////////////////////
        /// Utilities
        //////////////////////////////////////////////////////////////////////////
        virtual void init(void);

    private:

        //////////////////////////////////////////////////////////////////////////
        /// Utilities
        //////////////////////////////////////////////////////////////////////////
        Rectangle2DPrimitiveData PrimData;
    };
}

#endif