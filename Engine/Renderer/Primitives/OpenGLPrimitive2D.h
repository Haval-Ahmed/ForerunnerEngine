/// @file OpenGLPrimitive2D.h
/// @brief Primitive Renderer Object 2D class that contains necessary Renderer specific information to render an object
/// @author Haval Ahmed

#ifndef OPENGL_PRIMITIVE_2D_H
#define OPENGL_PRIMITIVE_2D_H

//////////////////////////////////////////////////////////////////////////
/// Standard Libraries
//////////////////////////////////////////////////////////////////////////
#include <vector>

//////////////////////////////////////////////////////////////////////////
/// Forerunner Libraries
//////////////////////////////////////////////////////////////////////////
#include "PrimitiveData2D.h"
#include "OpenGLShader.h"
#include "Transform.h"
#include "OpenGLTexture.h"

namespace ForerunnerEngine
{
    enum PRIMITIVE_TYPE_2D
    {
        TRIANGLE_2D = 0,
        RECTANGLE_2D,
        CIRCLE_2D,
        PENTAGON_2D,
        VERTICAL_LINE_2D,
        HORIZONTAL_LINE_2D,
        OVAL_2D,
        STAR_2D
    };

    class OpenGLPrimitive2D
    {
    public:
        //////////////////////////////////////////////////////////////////////////
        /// Constructor
        //////////////////////////////////////////////////////////////////////////
        OpenGLPrimitive2D(PRIMITIVE_TYPE_2D primitiveType);

        //////////////////////////////////////////////////////////////////////////
        /// Virtual Destructor
        //////////////////////////////////////////////////////////////////////////
        virtual ~OpenGLPrimitive2D();

        //////////////////////////////////////////////////////////////////////////
        /// Utilities
        //////////////////////////////////////////////////////////////////////////
        virtual void update(float deltaTime);

        // Symbolic constants 
        // GL_POINTS, 
        // GL_LINE_STRIP, 
        // GL_LINE_LOOP, 
        // GL_LINES, 
        // GL_LINE_STRIP_ADJACENCY, 
        // GL_LINES_ADJACENCY, 
        // GL_TRIANGLE_STRIP, 
        // GL_TRIANGLE_FAN, 
        // GL_TRIANGLES, 
        // GL_TRIANGLE_STRIP_ADJACENCY, 
        // GL_TRIANGLES_ADJACENCY
        // GL_PATCHES
        virtual void draw(float deltaTime, const glm::mat4& projectionMatrix);

        //////////////////////////////////////////////////////////////////////////
        /// Setters
        //////////////////////////////////////////////////////////////////////////
        virtual void setPosition(const glm::vec3& position);
        virtual void setRotation(float angle);
        virtual void setScale(const glm::vec3& scale);
        virtual void setColor(const glm::vec4& color);

        //////////////////////////////////////////////////////////////////////////
        /// Getters
        //////////////////////////////////////////////////////////////////////////
        virtual glm::vec3 getPosition(void);
        virtual glm::vec3 getOrientation(void);
        virtual glm::vec3 getScale(void);
        virtual OpenGLTexture& getTexture(void);
        virtual OpenGLShader& getShader(void);

    protected:

        //////////////////////////////////////////////////////////////////////////
        /// Utilities
        //////////////////////////////////////////////////////////////////////////
        virtual void init(void);

        //////////////////////////////////////////////////////////////////////////
        /// Primitive Info
        //////////////////////////////////////////////////////////////////////////
        PRIMITIVE_TYPE_2D Primitive2DType;
        size_t            PrimitiveVerticeCount;
        uint32_t          PrimitiveDrawType;

        //////////////////////////////////////////////////////////////////////////
        /// OpenGL Vertex Attribute Specification
        //////////////////////////////////////////////////////////////////////////
        uint32_t VAO;
        uint32_t VBO;

        //////////////////////////////////////////////////////////////////////////
        /// OpenGL Shader
        //////////////////////////////////////////////////////////////////////////
        OpenGLShader Shader2D;

        //////////////////////////////////////////////////////////////////////////
        /// Primitive Transform
        //////////////////////////////////////////////////////////////////////////
        Transform ModelTransform;

        //////////////////////////////////////////////////////////////////////////
        /// OpenGL Texture
        //////////////////////////////////////////////////////////////////////////
        OpenGLTexture Texture;

        //////////////////////////////////////////////////////////////////////////
        /// Color Change Texture
        //////////////////////////////////////////////////////////////////////////
        glm::vec4   PrimitiveColor;
        uint32_t    ChangePrimitiveColor;
    };

}

#endif