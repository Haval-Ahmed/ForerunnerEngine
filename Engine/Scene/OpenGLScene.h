//////////////////////////////////////////////////////////////////////////
/// @File:
///     OpenGLScene.h
/// @Notes:
///     OpenGL base scene class
/// @Author:
///     Haval Ahmed
/// @Copyright:
///     See attached license 
///		All rights reserved Haval Ahmed
//////////////////////////////////////////////////////////////////////////

#ifndef OPENGL_SCENE_H
#define OPENGL_SCENE_H

//////////////////////////////////////////////////////////////////////////
// Forerunner Libraries
//////////////////////////////////////////////////////////////////////////
#include "BaseScene.h"
#include "OpenGLPrimativeManager.h"
#include "FreeMovementCamera.h"

#ifdef WIN32
	#include "OpenGLRendererWin32.h"
	typedef ForerunnerEngine::OpenGLRendererWin32 OpenGLRenderer;
#else
	#include "OpenGLRendererLinux.h"
	typedef ForerunnerEngine::OpenGLRendererLinux OpenGLRenderer;
#endif 

namespace ForerunnerEngine
{
	class OpenGLScene : public BaseScene
	{
	public:

		//////////////////////////////////////////////////////////////////////////
		/// Constructor
		//////////////////////////////////////////////////////////////////////////
		OpenGLScene(OpenGLRenderer* renderer);

		//////////////////////////////////////////////////////////////////////////
		/// Virtual destructor
		//////////////////////////////////////////////////////////////////////////
		virtual ~OpenGLScene(void);

		//////////////////////////////////////////////////////////////////////////
		/// Utilities
		//////////////////////////////////////////////////////////////////////////
		virtual void update(double deltaTime);
		virtual void render(double deltaTime);
		virtual void loadScene(void);
		virtual uint32_t isSceneLoaded(void);
		virtual uint32_t isSceneComplete(void);

	protected:

		//////////////////////////////////////////////////////////////////////////
		/// Utilties
		//////////////////////////////////////////////////////////////////////////
		virtual void unloadScene(void);
		virtual void initializeScene(void);
		virtual void initializeShadersAndLayouts(void);
		virtual void initializeLighting(void);
		virtual void initializeSceneGeometry(void);
		virtual void initializeCamera(void);
		virtual void initializeWorldViewProjectionMatrix(void);

		//////////////////////////////////////////////////////////////////////////
		/// Scene variables
		//////////////////////////////////////////////////////////////////////////
		ForerunnerEngine::OpenGLPrimativeManager	mPrimativeManager;
		OpenGLRenderer*								mRenderer;
		uint32_t									mIsSceneLoaded;
		uint32_t									mIsSceneCompleted;

		//////////////////////////////////////////////////////////////////////////
		/// Scene variables
		//////////////////////////////////////////////////////////////////////////
		FRMath::Matrix4x4						mProjectionMatrix;
		ForerunnerEngine::FreeMovementCamera	mCamera;
	};
};

#endif
