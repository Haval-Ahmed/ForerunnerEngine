###############################################################################
### File: shaderToCString.py
### Purpose: Converts a shader to a C String
### Requirements: Python 3
###############################################################################

###############################################################################
#### Standard Library
###############################################################################
import os
import sys
import argparse 

###############################################################################
### Autogenerated header for create file
###############################################################################
autoGenHeader = \
    "///////////////////////////////////////////////////////////////////////////////\n \
    /// Autogenerated File from shaderToCString.py\n \
    /// File: %s \n\
    ///////////////////////////////////////////////////////////////////////////////\n"

shaderAssignmentString = "const char* shader = \\\n%s"


def main(inputFileName):
    # Ensure we have a valid file 
    inputFileName = os.getcwd() + "/" + inputFileName

    # Check if valid file
    if os.path.isfile(inputFileName):
        # Generate a new file name
        outputFileName = "shaderStrings.h" 

        with open(outputFileName, 'w') as outputFile, open(inputFileName, 'r', encoding='utf-8') as inputFile:
            # Write autogen header
            outputFile.write(autoGenHeader % outputFileName)

            shaderSource = '"\\\n'

            for line in inputFile:
                line = line.replace("\n", "")
                shaderSource = shaderSource + line + " \\\n"

            shaderSource = shaderSource + '";'

            outputFile.write(shaderAssignmentString % shaderSource)
    

if __name__ == "__main__":
    # Create a argument parser to read in a file name
    parser = argparse.ArgumentParser(description="Reads in shader file and outputs")

    # Define arguments
    parser.add_argument('-fileName', '-fn', type = str, action = "store", default = "")

    # Parse arguments
    programArguments = parser.parse_args()

    # Call main application
    main(programArguments.fileName)